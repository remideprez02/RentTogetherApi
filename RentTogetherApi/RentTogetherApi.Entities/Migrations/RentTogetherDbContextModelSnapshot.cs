// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using RentTogetherApi.Entities;
using System;

namespace RentTogetherApi.Entities.Migrations
{
    [DbContext(typeof(RentTogetherDbContext))]
    partial class RentTogetherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RentTogetherApi.Entities.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<int?>("OwnerUserId");

                    b.Property<string>("PostalCode");

                    b.HasKey("BuildingId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.BuildingUser", b =>
                {
                    b.Property<int>("BuildingId");

                    b.Property<int>("UserId");

                    b.HasKey("BuildingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BuildingUsers");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Type");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Demand", b =>
                {
                    b.Property<int>("DemandId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ConversationId");

                    b.Property<DateTime>("DemandDate");

                    b.Property<int?>("FromUserUserId");

                    b.Property<int?>("ToUserUserId");

                    b.Property<int?>("UserId");

                    b.HasKey("DemandId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("FromUserUserId");

                    b.HasIndex("ToUserUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Historic", b =>
                {
                    b.Property<int>("HistoricId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ConversationId");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("UserId");

                    b.HasKey("HistoricId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Historics");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("InterestedUserUserId");

                    b.Property<int?>("InterestingUserUserId");

                    b.Property<int?>("UserId");

                    b.HasKey("MatchId");

                    b.HasIndex("InterestedUserUserId");

                    b.HasIndex("InterestingUserUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ConversationId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("EditorUserId");

                    b.Property<string>("MessageText");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("EditorUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Personality", b =>
                {
                    b.Property<int>("PersonalityId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Score");

                    b.HasKey("PersonalityId");

                    b.ToTable("Personnalities");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.PersonalityReferencial", b =>
                {
                    b.Property<int>("PersonalityReferencialId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Icon");

                    b.Property<int?>("PersonalityId");

                    b.HasKey("PersonalityReferencialId");

                    b.HasIndex("PersonalityId");

                    b.ToTable("PersonalityReferencials");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.PotentialMatch", b =>
                {
                    b.Property<int>("PotentialMatchId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("InterestedUserUserId");

                    b.Property<int?>("InterestingUserUserId");

                    b.Property<int?>("UserId");

                    b.HasKey("PotentialMatchId");

                    b.HasIndex("InterestedUserUserId");

                    b.HasIndex("InterestingUserUserId");

                    b.HasIndex("UserId");

                    b.ToTable("PotentialMatches");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("IsActive");

                    b.Property<int>("IsAdmin");

                    b.Property<int>("IsOwner");

                    b.Property<int>("IsRoomer");

                    b.Property<int>("IsValideUser");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<int?>("PersonalityFk");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Token");

                    b.Property<DateTime>("TokenExpirationDate");

                    b.Property<int?>("Vote1Fk");

                    b.Property<int?>("Vote2Fk");

                    b.HasKey("UserId");

                    b.HasIndex("PersonalityFk")
                        .IsUnique()
                        .HasFilter("[PersonalityFk] IS NOT NULL");

                    b.HasIndex("Vote2Fk")
                        .IsUnique()
                        .HasFilter("[Vote2Fk] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Validation", b =>
                {
                    b.Property<int>("ValidationId");

                    b.Property<int>("IsValidate");

                    b.Property<DateTime>("ValidationDate");

                    b.Property<int?>("VoteUserUserId");

                    b.HasKey("ValidationId");

                    b.HasIndex("VoteUserUserId");

                    b.ToTable("Validations");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Vote", b =>
                {
                    b.Property<int>("VoteId");

                    b.Property<int?>("PersonalityReferencialId");

                    b.Property<double>("Score");

                    b.Property<int?>("VoteUserUserId");

                    b.HasKey("VoteId");

                    b.HasIndex("PersonalityReferencialId");

                    b.HasIndex("VoteUserUserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Building", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.User", "Owner")
                        .WithMany("Buildings")
                        .HasForeignKey("OwnerUserId");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.BuildingUser", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.Building", "Building")
                        .WithMany("BuildingUsers")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RentTogetherApi.Entities.User", "User")
                        .WithMany("BuildingUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Demand", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId");

                    b.HasOne("RentTogetherApi.Entities.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserUserId");

                    b.HasOne("RentTogetherApi.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserUserId");

                    b.HasOne("RentTogetherApi.Entities.User")
                        .WithMany("Demands")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Historic", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId");

                    b.HasOne("RentTogetherApi.Entities.User", "User")
                        .WithMany("Historics")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Match", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.User", "InterestedUser")
                        .WithMany()
                        .HasForeignKey("InterestedUserUserId");

                    b.HasOne("RentTogetherApi.Entities.User", "InterestingUser")
                        .WithMany()
                        .HasForeignKey("InterestingUserUserId");

                    b.HasOne("RentTogetherApi.Entities.User")
                        .WithMany("Matches")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Message", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId");

                    b.HasOne("RentTogetherApi.Entities.User", "Editor")
                        .WithMany("Messages")
                        .HasForeignKey("EditorUserId");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.PersonalityReferencial", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.Personality")
                        .WithMany("PersonalityReferencials")
                        .HasForeignKey("PersonalityId");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.PotentialMatch", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.User", "InterestedUser")
                        .WithMany()
                        .HasForeignKey("InterestedUserUserId");

                    b.HasOne("RentTogetherApi.Entities.User", "InterestingUser")
                        .WithMany()
                        .HasForeignKey("InterestingUserUserId");

                    b.HasOne("RentTogetherApi.Entities.User")
                        .WithMany("PotentialMatches")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.User", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.Personality", "Personality")
                        .WithOne("User")
                        .HasForeignKey("RentTogetherApi.Entities.User", "PersonalityFk");

                    b.HasOne("RentTogetherApi.Entities.Vote", "Vote")
                        .WithOne()
                        .HasForeignKey("RentTogetherApi.Entities.User", "Vote2Fk");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Validation", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.Demand", "Demand")
                        .WithOne("Validation")
                        .HasForeignKey("RentTogetherApi.Entities.Validation", "ValidationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RentTogetherApi.Entities.User", "VoteUser")
                        .WithMany("Validations")
                        .HasForeignKey("VoteUserUserId");
                });

            modelBuilder.Entity("RentTogetherApi.Entities.Vote", b =>
                {
                    b.HasOne("RentTogetherApi.Entities.PersonalityReferencial", "PersonalityReferencial")
                        .WithMany()
                        .HasForeignKey("PersonalityReferencialId");

                    b.HasOne("RentTogetherApi.Entities.User", "TargetUser")
                        .WithOne()
                        .HasForeignKey("RentTogetherApi.Entities.Vote", "VoteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RentTogetherApi.Entities.User", "VoteUser")
                        .WithMany()
                        .HasForeignKey("VoteUserUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
